version: 0.2

phases:
  build:
    commands:
      - echo "Downloading latest Terraform"
      - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.12.1/terraform_1.12.1_linux_amd64.zip
      - unzip terraform.zip
      - mv terraform /usr/local/bin/
      - terraform -version

      # Create state bucket first
      - cd S3/state-bucket
      - |
        if aws s3api head-bucket --bucket "testingxperts-terraform-state" 2>/dev/null; then
          echo "State bucket already exists, skipping creation..."
        else
          echo "Creating state bucket..."
          terraform init
          terraform fmt
          terraform validate
          terraform plan -out=tfplan
          terraform apply -auto-approve
        fi
      
      
      # Initialize with backend configuration
      - cd ../
      - terraform init -migrate-state
      - terraform fmt
      - terraform validate

      # Function to get bucket name from tfvars
      - |
        BUCKET_NAME=$(grep bucket_name terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
        echo "Target bucket name: $BUCKET_NAME"

      # Check state and AWS
      - echo "Checking infrastructure state..."
      - |
        # First check state file
        if terraform state list | grep -q "aws_s3_bucket.main"; then
          echo "‚úÖ Bucket exists in state file, checking for changes..."
          terraform plan -detailed-exitcode -var-file="terraform.tfvars" >/dev/null 2>&1
          PLAN_STATUS=$?
          
          case $PLAN_STATUS in
            0)
              echo "‚úÖ No changes needed - infrastructure is up to date"
              exit 0
              ;;
            1)
              echo "‚ùå Error running plan"
              exit 1
              ;;
            2)
              echo "üîÑ Changes detected in existing bucket, proceeding with update..."
              terraform plan -out=tfplan -var-file="terraform.tfvars"
              terraform apply -auto-approve tfplan
              ;;
          esac
        else
          echo "Bucket not found in state file, checking in AWS..."
          # Check if bucket exists in AWS
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "‚ö†Ô∏è Warning: Bucket '$BUCKET_NAME' exists in AWS but not in state!"
            echo "‚ùå Cannot proceed - bucket exists but is not managed by Terraform"
            echo "Suggestions:"
            echo "1. Choose a different bucket name"
            echo "2. Import existing bucket into Terraform state using:"
            echo "   terraform import aws_s3_bucket.main $BUCKET_NAME"
            exit 0
          else
            echo "üÜï Bucket doesn't exist anywhere, creating new..."
            terraform plan -out=tfplan -var-file="terraform.tfvars"
            terraform apply -auto-approve tfplan
          fi
        fi